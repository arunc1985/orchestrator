
Aim of the exercise: Host a simple flask app via K8s. 

1. Create a simple flask app
2. Build a Docker image
3. Tag & Push the image to docker hub
4. Pull the mongo image from the docker hub
5. Create K8s deployment yaml file for pulling and running the flask app image and mongo db image
6. Access the application via K8s

Pre-Requisite:
	1. Docker installed and running
	2. K8s installed and running
	3. kubectl enabled to run

Note : In this example we will run 2 containers inside of the POD.

# Delete the deployment if in case if already exists

kubectl delete deployment python-mongo && kubectl delete services python-mongo-service

# Delete the image if it already exists
docker rmi -f python-mongo:testing mongo:latest


# Build the python flask app image, tag it and push the image to docker hub registry

docker build -t python-mongo:testing -f dockerfile .
docker tag python-mongo:testing jupiter19/jupiter19:testing-pymongo
docker push jupiter19/jupiter19:testing-pymongo

# Pull the mongo:latest image
docker pull mongo:latest


# Deploy the image using declarative method - Refer file k8s.yaml
kubectl apply -f k8s.yaml

# Check if the deployment is running!
kubectl get deployments

# Check  if the Pods are created and running!
kubectl describe pods
kubectl get pods

# Run these CURL commands..

curl -XGET http://localhost:6000/

curl -XGET http://localhost:6000/welcome/Arun/Chandramouli
curl -XGET http://localhost:6000/hello_mongo/


# Execute commands on a specific container inside of POD

Syntax : kubectl exec -it <<POD-NAME>> -c <<CONTAINER-NAME>> <<COMMAND>>

# Example as below - Please change the pod name to reflect yours . Run command kubectl get pods and find pod name.
kubectl exec -it python-mongo-c5687b876-4zbnd -c python-mongo-app bash
