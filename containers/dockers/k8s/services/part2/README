Aim::
-----
There are basically 4 types of services being used as described here:
https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/


To access this exercise do the following steps ::
-----------------------------------------------------------
git clone https://github.com/arunc1985/orchestrator.git
git checkout k8s
cd containers/dockers/k8s/services/part2
-----------------------------------------------------------

In this example we are going to use ** ClusterIP ** service type

---------------------------------------------------------------------------------------------------------------------
Services can be exposed in different ways by specifying a type in the ServiceSpec:

ClusterIP (default) - Exposes the Service on an internal IP in the cluster. This type makes the Service only reachable from within the cluster.

NodePort - Exposes the Service on the same port of each selected Node in the cluster using NAT. Makes a Service accessible from outside the cluster using <NodeIP>:<NodePort>. Superset of ClusterIP.

LoadBalancer - Creates an external load balancer in the current cloud (if supported) and assigns a fixed, external IP to the Service. Superset of NodePort.

ExternalName - Exposes the Service using an arbitrary name (specified by externalName in the spec) by returning a CNAME record with the name. No proxy is used. This type requires v1.7 or higher of kube-dns.

---------------------------------------------------------------------------------------------------------------------

# First delete all
kubectl delete deployments --all && kubectl delete pods --all && kubectl delete services --all

# Deploy the Application
kubectl apply -f deploy.yaml

# Check the Status
kubectl get deployments hello-world
kubectl describe deployments hello-world
kubectl get replicasets
kubectl describe replicasets
kubectl get pods


# Create a service and expose in port 6000
# The command below will expose the PORT, here target-port=5000 since the app container is running in PORT 5000
# In this example we are going to use ** LoadBalancer ** service type

kubectl expose deployment hello-world --type=ClusterIP --name=example-service --port=6000 --target-port=5000
kubectl get services
kubectl describe service example-service
kubectl get svc example-service

****************************************************************************************
$ kubectl get svc example-service
NAME              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
example-service   ClusterIP   10.110.41.195   <none>        6000/TCP   13s
****************************************************************************************

As you see above the service is of type ClusterIP and it will not be accessible outside of Cluster

# Get PODS - We have to execute command inside the POD to get the required output
kubectl get pods --selector="run=load-balancer-example" --output=wide

arunkuch@ARUNKUCH-9NCZB MINGW64 ~/Documents/Programs/containers/orchestrator/containers/dockers/k8s/services/part2 (k8s)
$ kubectl get pods --selector="run=load-balancer-example" --output=wide
NAME                           READY   STATUS    RESTARTS   AGE   IP           NODE             NOMINATED NODE   READINESS GATES
hello-world-5c5d8c4799-2qfq7   1/1     Running   0          19m   10.1.7.246   docker-desktop   <none>           <none>
hello-world-5c5d8c4799-cs968   1/1     Running   0          19m   10.1.7.245   docker-desktop   <none>           <none>

-----------------------------------------------------------------------------------------------------------------------

# Login to the POD
arunkuch@ARUNKUCH-9NCZB MINGW64 ~/Documents/Programs/containers/orchestrator/containers/dockers/k8s/services/part2 (k8s)
$ kubectl exec --stdin --tty hello-world-5c5d8c4799-2qfq7 -- bash

# Now run the CURL Command to send a request to the running application and it works as shown below;

10.110.41.195 -> This IP is the Cluster IP - Refer to cmd above : kubectl get svc example-service
---------------------------------------------------------------------------------------------------

[root@hello-world-5c5d8c4799-2qfq7 /]# curl http://10.110.41.195:6000/
{
  "true": "Hello There! Welcome to K8s!"
}
[root@hello-world-5c5d8c4799-2qfq7 /]#

-----------------------------------------------------------------------------------------------------------------------


Note :: 
--------
If you see deploy.yaml we had used the following image - docker.io/jupiter19/jupiter19:testing-pymongo
The Code for the image is here - https://github.com/arunc1985/orchestrator/blob/k8s/containers/dockers/basics/exercise007

K8s Services Reference ::
-------------------------
https://kubernetes.io/docs/concepts/services-networking/service/
https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/
https://kubernetes.io/docs/concepts/services-networking/service/
https://cloud.google.com/kubernetes-engine/docs/how-to/exposing-apps#kubectl-apply
https://www.bmc.com/blogs/kubernetes-services/
https://gardener.cloud/documentation/guides/applications/service-access/
https://docs.giantswarm.io/guides/accessing-services-from-the-outside/
https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-mapping-external-services

-----------------------------------------------------------------------------------------------------------------------
